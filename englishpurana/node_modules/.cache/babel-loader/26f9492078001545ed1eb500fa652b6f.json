{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gogik\\\\PycharmProjects\\\\Puranas\\\\english-purana\\\\src\\\\components\\\\index.js\",\n    _s = $RefreshSig$();\n\n// Create an index page which has a list of puranas\n// when clicked on a purana we are led to a page which shows all the list chapters and sections\n// and a button to start reading from the first page\n// our choice should be saved in the app state in redux\n// The app state will be used to show the appropriate contents\nimport '../App.css';\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PuranaIndex() {\n  _s();\n\n  const [url, setUrl] = useState(\"https://raw.githubusercontent.com/Akhilesh-Gogikar/English-Puranas/master/index.json\");\n  const [puranas, setPuranas] = useState(\"https://raw.githubusercontent.com/Akhilesh-Gogikar/English-Puranas/master/index.json\");\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState({\n    'text': []\n  });\n  const [purana, setPurana] = useState([]);\n\n  const goNext = props => {\n    if (purans.hasOwnProperty(props.title)) {\n      setItems(purans[props.title]);\n    } else {// Set the state in redux to the chapter in puran and redirect to /puranas\n    }\n  };\n\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setPuranas(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, [puranas]); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, [url]);\n  console.log(items['text']);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"AppHeader\",\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"red-text-shadow\",\n          style: {\n            textDecoration: \"underline\"\n          },\n          children: \"Puranas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          className: \"btn btn-primary filldiv\",\n          value: \"Start Reading\",\n          onClick: goNext()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: puranas.map(notification => /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"button\",\n            className: \"btn btn-primary filldiv\",\n            value: notification,\n            onClick: goNext(notification)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 42\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(PuranaIndex, \"zcuJSXdCE4hyjWGS6aqcmF/021c=\");\n\n_c = PuranaIndex;\nexport default PuranaIndex;\n\nvar _c;\n\n$RefreshReg$(_c, \"PuranaIndex\");","map":{"version":3,"sources":["C:/Users/gogik/PycharmProjects/Puranas/english-purana/src/components/index.js"],"names":["React","useState","useEffect","Button","PuranaIndex","url","setUrl","puranas","setPuranas","error","setError","isLoaded","setIsLoaded","items","setItems","purana","setPurana","goNext","props","purans","hasOwnProperty","title","fetch","then","res","json","result","console","log","message","textDecoration","map","notification"],"mappings":"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","sourcesContent":["// Create an index page which has a list of puranas\r\n// when clicked on a purana we are led to a page which shows all the list chapters and sections\r\n// and a button to start reading from the first page\r\n// our choice should be saved in the app state in redux\r\n// The app state will be used to show the appropriate contents\r\nimport '../App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nfunction PuranaIndex(){\r\n\r\n  const [url, setUrl] = useState(\"https://raw.githubusercontent.com/Akhilesh-Gogikar/English-Puranas/master/index.json\")\r\n  const [puranas, setPuranas] = useState(\"https://raw.githubusercontent.com/Akhilesh-Gogikar/English-Puranas/master/index.json\")\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState({'text':[]});\r\n  const [purana, setPurana] = useState([]);\r\n\r\n  const goNext = (props) => {\r\n    if (purans.hasOwnProperty(props.title)){\r\n      setItems(purans[props.title]);\r\n    } else {\r\n      // Set the state in redux to the chapter in puran and redirect to /puranas\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then( res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setPuranas(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [puranas])\r\n\r\n  // Note: the empty deps array [] means\r\n  // this useEffect will run once\r\n  // similar to componentDidMount()\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then( res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [url])\r\n\r\n  console.log(items['text'])\r\n\r\n  if (error) {\r\n    return <div className='App' >\r\n    <header className=\"AppHeader\">Error: {error.message}\r\n    </header>\r\n    </div>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <div className='App' >\r\n      <header className=\"App-header\">\r\n\r\n      <p className='red-text-shadow' style={{textDecoration:\"underline\"}}>Puranas</p>\r\n\r\n      <input type=\"button\" className=\"btn btn-primary filldiv\" value=\"Start Reading\" onClick={goNext()}></input>\r\n\r\n      <div>{ puranas.map(notification => <input type=\"button\" className=\"btn btn-primary filldiv\" value={ notification } onClick={goNext(notification)}></input>) }</div>\r\n\r\n      </header>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default PuranaIndex;\r\n"]},"metadata":{},"sourceType":"module"}