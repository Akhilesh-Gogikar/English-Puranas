{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gogik\\\\PycharmProjects\\\\Puranas\\\\english-purana\\\\src\\\\components\\\\index.js\",\n    _s = $RefreshSig$();\n\n// Create an index page which has a list of puranas\n// when clicked on a purana we are led to a page which shows all the list chapters and sections\n// and a button to start reading from the first page\n// our choice should be saved in the app state in redux\n// The app state will be used to show the appropriate contents\nimport '../App.css';\nimport React, { useState, useEffect } from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport { connect } from \"react-redux\";\nimport { setPage } from \"../redux/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PuranaIndex() {\n  _s();\n\n  const [url, setUrl] = useState(\"https://raw.githubusercontent.com/Akhilesh-Gogikar/English-Puranas/master/puranasIndex.json\");\n  const [purl, setPurl] = useState(\"https://raw.githubusercontent.com/Akhilesh-Gogikar/English-Puranas/master/puranas.json\");\n  const [puranas, setPuranas] = useState({\n    'puranas': []\n  });\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState({\n    'text': []\n  });\n  const [elements, setElements] = useState([]);\n  const [purana, setPurana] = useState([]);\n  const [title, setTitle] = useState('Puranas');\n\n  const goNext = props => {\n    if (props && items.hasOwnProperty(props.title)) {\n      setElements(items[props.title]);\n    } else {\n      if (props) {\n        setPage(props.title);\n      } else {\n        setPage('1');\n      } // Set the state in redux to the chapter in puran and redirect to /puranas\n\n    }\n  };\n\n  useEffect(() => {\n    fetch(purl).then(res => res.json()).then(result => {\n      // console.log(result)\n      setPuranas(result);\n      setElements(puranas.puranas);\n      console.log(elements);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setError(error);\n    });\n  }, [purl]); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(url).then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, [url]); // console.log('Puranas')\n  // console.log(puranas.puranas)\n\n  const goBack = () => {\n    setElements(puranas.puranas);\n  }; //\n  // console.log('Index')\n  // console.log(items)\n\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"AppHeader\",\n        children: [\"Error: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 12\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"red-text-shadow\",\n          style: {\n            textDecoration: \"underline\"\n          },\n          children: \"Puranas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          value: \"Start Reading\",\n          onClick: () => goNext()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          value: \"Index\",\n          onClick: () => goBack()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: elements.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"button\",\n              className: \"btn btn-primary\",\n              value: notification.title,\n              onClick: () => goNext(notification)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 48\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 171\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 43\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(PuranaIndex, \"75JB0My0xwwkgJeNrbmEL0hXViU=\");\n\n_c = PuranaIndex;\nexport default PuranaIndex;\n\nvar _c;\n\n$RefreshReg$(_c, \"PuranaIndex\");","map":{"version":3,"sources":["C:/Users/gogik/PycharmProjects/Puranas/english-purana/src/components/index.js"],"names":["React","useState","useEffect","Button","connect","setPage","PuranaIndex","url","setUrl","purl","setPurl","puranas","setPuranas","error","setError","isLoaded","setIsLoaded","items","setItems","elements","setElements","purana","setPurana","title","setTitle","goNext","props","hasOwnProperty","fetch","then","res","json","result","console","log","goBack","message","textDecoration","map","notification"],"mappings":"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","sourcesContent":["// Create an index page which has a list of puranas\r\n// when clicked on a purana we are led to a page which shows all the list chapters and sections\r\n// and a button to start reading from the first page\r\n// our choice should be saved in the app state in redux\r\n// The app state will be used to show the appropriate contents\r\nimport '../App.css';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { connect } from \"react-redux\";\r\nimport { setPage } from \"../redux/actions\";\r\n\r\nfunction PuranaIndex(){\r\n\r\n  const [url, setUrl] = useState(\"https://raw.githubusercontent.com/Akhilesh-Gogikar/English-Puranas/master/puranasIndex.json\")\r\n  const [purl, setPurl] = useState(\"https://raw.githubusercontent.com/Akhilesh-Gogikar/English-Puranas/master/puranas.json\")\r\n  const [puranas, setPuranas] = useState({'puranas':[]});\r\n  const [error, setError] = useState(null);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [items, setItems] = useState({'text':[]});\r\n  const [elements, setElements] = useState([]);\r\n  const [purana, setPurana] = useState([]);\r\n  const [title, setTitle] = useState('Puranas');\r\n\r\n  const goNext = (props) => {\r\n\r\n    if (props && items.hasOwnProperty(props.title)){\r\n      setElements(items[props.title]);\r\n    } else {\r\n      if(props){\r\n        setPage(props.title)\r\n      } else {\r\n        setPage('1')\r\n      }\r\n      // Set the state in redux to the chapter in puran and redirect to /puranas\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch(purl)\r\n      .then( res => res.json())\r\n      .then(\r\n        (result) => {\r\n          // console.log(result)\r\n          setPuranas(result);\r\n          setElements(puranas.puranas);\r\n          console.log(elements)\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [purl])\r\n\r\n  // Note: the empty deps array [] means\r\n  // this useEffect will run once\r\n  // similar to componentDidMount()\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then( res => res.json())\r\n      .then(\r\n        (result) => {\r\n          setIsLoaded(true);\r\n          setItems(result);\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          setIsLoaded(true);\r\n          setError(error);\r\n        }\r\n      )\r\n  }, [url])\r\n  // console.log('Puranas')\r\n  // console.log(puranas.puranas)\r\n\r\n  const goBack = () => {\r\n      setElements(puranas.puranas);\r\n  }\r\n\r\n  //\r\n  // console.log('Index')\r\n  // console.log(items)\r\n\r\n  if (error) {\r\n    return <div className='App' >\r\n    <header className=\"AppHeader\">Error: {error.message}\r\n    </header>\r\n    </div>;\r\n  } else if (!isLoaded) {\r\n    return <div>Loading...</div>;\r\n  } else {\r\n    return (\r\n      <div className='App' >\r\n      <header className=\"App-header\">\r\n\r\n      <p className='red-text-shadow' style={{textDecoration:\"underline\"}}>Puranas</p>\r\n\r\n      <input type=\"button\" className=\"btn btn-primary\" value=\"Start Reading\" onClick={() => goNext()}></input>\r\n\r\n      <p/>\r\n\r\n      <input type=\"button\" className=\"btn btn-danger\" value=\"Index\" onClick={() => goBack()}></input>\r\n\r\n      <br/>\r\n\r\n      <div>{ elements.map(notification => <div><input type=\"button\" className=\"btn btn-primary\" value={ notification.title } onClick={() => goNext(notification)}></input><br/></div>) }</div>\r\n\r\n      <br/>\r\n\r\n      </header>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default PuranaIndex;\r\n"]},"metadata":{},"sourceType":"module"}